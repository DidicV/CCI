@page "/linechart"
<h3>Lines Chart</h3>

<div class="d-flex">
    <select class="form-select" multiple="@true" @onchange="OnSelectionChanged" style="width:25%;">
        @foreach (var student in Students)
        {
            <option value="@student.Id">@student.Name</option>
        }
    </select>

    <div class="mx-2"></div>

    <RadzenDropDown TValue="Discipline" Data="@Disciplines" TextProperty="Name"
                    ValueProperty="Id" Change=@(args => FirstDiscipline(args)) />

    <div class="mx-2"></div>

    <RadzenButton Text="Calculate" Click="@ButtonClick" Style="height: 30px;" />

</div>
<br />
<br />

<center>
    <div id="scatter" style="height: 650px; border:1px solid double; box-shadow: 5px 10px 8px 5px #888888;"></div>
</center>
<br />

@code 
{
    public List<Discipline> Disciplines = new();

    public Guid DisciplineId;

    public List<Student> Students { get; set; } = new();

    private List<Guid> selectedIds = new List<Guid>();


    class ScatterData
    {
        public List<int> x { get; set; } = new();

        public List<int> y { get; set; } = new();

        public string mode { get; set; } = string.Empty;

        public string name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        Students = await StudentService.GetStudents();
        Disciplines = await DisciplineService.GetDisciplines();
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        selectedIds = ((string[])e.Value).Select(Guid.Parse).ToList();
    }

    private void FirstDiscipline(object id)
    {
        DisciplineId = (Guid)id;
    }

    private async void ButtonClick(MouseEventArgs args)
    {
        var data = new List<ScatterData>();

        if (selectedIds.Any() && DisciplineId != Guid.Empty)
        {
            foreach(var studentId in selectedIds)
            {
                var grades = await GradeService.GetGradesByStudentIdandDisciplineId(studentId, DisciplineId);

                var scatterData = new ScatterData();

                scatterData.y = grades.Select(g => g.Mark).ToList();

                for(int i = 0; i < grades.Count; i++)
                {
                    scatterData.x.Add(i+1);
                }

                scatterData.name = Students.FirstOrDefault(s => s.Id == studentId).Name ?? "";

                scatterData.mode = "lines+markers";

                data.Add(scatterData);
            }

            await JsRunTime.InvokeVoidAsync("GenerateScatterChart", data);
        }
    }
}